services:

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - kafka-net

  etl_consumer:
    build: 
      context: .
      dockerfile: Dockerfile
    depends_on:
      #- kafka
      - redis
      - mongo
      - mysql
    environment:
      # Kafka
      KAFKA_BROKER: 'kafka:9092'
      KAFKA_TOPIC: 'probando'
      KAFKA_GROUP_ID: 'etl-consumer-group-test1'

      # Redis
      REDIS_HOST: redis
      REDIS_PORT: "6379"

      # MongoDB
      MONGODB_URL: mongodb://mongo_f5_de1:3tL_f542@mongo:27017/
      MONGO_DB_NAME: mongo_consumer
      MONGODB_COLLECTION: raw_data
      MONGO_HOST: mongo
      MONGO_PORT: "27017"
      MONGO_INITDB_ROOT_USERNAME: mongo_f5_de1
      MONGO_INITDB_ROOT_PASSWORD: 3tL_f542

      # Control flags
      IN_DOCKER: "1"

    #command: ["tail", "-f", "/dev/null"]  # Cambia por tu script real si lo necesitas
    
    volumes:
      - .:/app
    working_dir: /app
    networks:
      - kafka-net


  mongo:
    image: mongo:7.0
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo_f5_de1
      MONGO_INITDB_ROOT_PASSWORD: 3tL_f542
    volumes:
      - mongo_data:/data/db
    networks:
      - kafka-net

  mysql:
      image: mysql:8.0
      ports:
        - "3306:3306"
      environment:
        MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}  
        MYSQL_DATABASE: ${MYSQL_DATABASE}            
        MYSQL_USER: ${MYSQL_USER}                    
        MYSQL_PASSWORD: ${MYSQL_PASSWORD}            
      volumes:
        - mysql_data:/var/lib/mysql  
      networks:
        - kafka-net

volumes:
  mysql_data:
  mongo_data:
networks:
  kafka-net:
    driver: bridge
